//
//  TawazonTalkTriangle.swift
//  Tawazon
//
//  Created by MoatasemKharraz on 12/18/22.
//  Copyright Â© 2022 Tawazon. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class TawazonTalkTriangle : NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawCanvas1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 267), resizing: ResizingBehavior = .stretch) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 267), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 267)


        //// Color Declarations
        let fillColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1)

        //// Image Declarations
        let image = UIImage(named: "image.png")!

        //// Group 2
        //// Group 3
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.move(to: CGPoint(x: 41.02, y: 0))
        clipPath.addLine(to: CGPoint(x: 333.98, y: 0))
        clipPath.addCurve(to: CGPoint(x: 358.63, y: 4.27), controlPoint1: CGPoint(x: 348.24, y: 0), controlPoint2: CGPoint(x: 353.41, y: 1.49))
        clipPath.addCurve(to: CGPoint(x: 370.73, y: 16.37), controlPoint1: CGPoint(x: 363.84, y: 7.06), controlPoint2: CGPoint(x: 367.94, y: 11.16))
        clipPath.addCurve(to: CGPoint(x: 375, y: 41.02), controlPoint1: CGPoint(x: 373.51, y: 21.59), controlPoint2: CGPoint(x: 375, y: 26.76))
        clipPath.addLine(to: CGPoint(x: 375, y: 164.66))
        clipPath.addCurve(to: CGPoint(x: 372.59, y: 184.28), controlPoint1: CGPoint(x: 375, y: 175.89), controlPoint2: CGPoint(x: 374.22, y: 179.95))
        clipPath.addCurve(to: CGPoint(x: 365.08, y: 195.42), controlPoint1: CGPoint(x: 370.96, y: 188.61), controlPoint2: CGPoint(x: 368.48, y: 192.28))
        clipPath.addCurve(to: CGPoint(x: 347.81, y: 205.02), controlPoint1: CGPoint(x: 361.69, y: 198.56), controlPoint2: CGPoint(x: 358.22, y: 200.8))
        clipPath.addLine(to: CGPoint(x: 210.09, y: 260.84))
        clipPath.addCurve(to: CGPoint(x: 193.31, y: 266.31), controlPoint1: CGPoint(x: 200.64, y: 264.67), controlPoint2: CGPoint(x: 197.25, y: 265.66))
        clipPath.addCurve(to: CGPoint(x: 181.69, y: 266.31), controlPoint1: CGPoint(x: 189.36, y: 266.96), controlPoint2: CGPoint(x: 185.64, y: 266.96))
        clipPath.addCurve(to: CGPoint(x: 164.91, y: 260.84), controlPoint1: CGPoint(x: 177.75, y: 265.66), controlPoint2: CGPoint(x: 174.36, y: 264.67))
        clipPath.addLine(to: CGPoint(x: 27.19, y: 205.02))
        clipPath.addCurve(to: CGPoint(x: 9.92, y: 195.42), controlPoint1: CGPoint(x: 16.78, y: 200.8), controlPoint2: CGPoint(x: 13.31, y: 198.56))
        clipPath.addCurve(to: CGPoint(x: 2.41, y: 184.28), controlPoint1: CGPoint(x: 6.52, y: 192.28), controlPoint2: CGPoint(x: 4.04, y: 188.61))
        clipPath.addCurve(to: CGPoint(x: 0, y: 164.66), controlPoint1: CGPoint(x: 0.78, y: 179.95), controlPoint2: CGPoint(x: 0, y: 175.89))
        clipPath.addLine(to: CGPoint(x: 0, y: 41.02))
        clipPath.addCurve(to: CGPoint(x: 4.27, y: 16.37), controlPoint1: CGPoint(x: 0, y: 26.76), controlPoint2: CGPoint(x: 1.49, y: 21.59))
        clipPath.addCurve(to: CGPoint(x: 16.37, y: 4.27), controlPoint1: CGPoint(x: 7.06, y: 11.16), controlPoint2: CGPoint(x: 11.16, y: 7.06))
        clipPath.addCurve(to: CGPoint(x: 41.02, y: 0), controlPoint1: CGPoint(x: 21.59, y: 1.49), controlPoint2: CGPoint(x: 26.76, y: 0))
        clipPath.close()
        clipPath.usesEvenOddFillRule = true
        clipPath.addClip()


        //// Picture Drawing
        context.saveGState()
        context.translateBy(x: 0, y: 267)
        context.scaleBy(x: 2.08, y: -2.09)

        let picturePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 180, height: 128))
        context.saveGState()
        picturePath.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -image.size.height)
        context.draw(image.cgImage!, in: CGRect(x: 0, y: 0, width: image.size.width, height: image.size.height))
        context.restoreGState()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 41.02, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 333.98, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 358.63, y: 4.27), controlPoint1: CGPoint(x: 348.24, y: 0), controlPoint2: CGPoint(x: 353.41, y: 1.49))
        bezier2Path.addCurve(to: CGPoint(x: 370.73, y: 16.37), controlPoint1: CGPoint(x: 363.84, y: 7.06), controlPoint2: CGPoint(x: 367.94, y: 11.16))
        bezier2Path.addCurve(to: CGPoint(x: 375, y: 41.02), controlPoint1: CGPoint(x: 373.51, y: 21.59), controlPoint2: CGPoint(x: 375, y: 26.76))
        bezier2Path.addLine(to: CGPoint(x: 375, y: 164.66))
        bezier2Path.addCurve(to: CGPoint(x: 372.59, y: 184.28), controlPoint1: CGPoint(x: 375, y: 175.89), controlPoint2: CGPoint(x: 374.22, y: 179.95))
        bezier2Path.addCurve(to: CGPoint(x: 365.08, y: 195.42), controlPoint1: CGPoint(x: 370.96, y: 188.61), controlPoint2: CGPoint(x: 368.48, y: 192.28))
        bezier2Path.addCurve(to: CGPoint(x: 347.81, y: 205.02), controlPoint1: CGPoint(x: 361.69, y: 198.56), controlPoint2: CGPoint(x: 358.22, y: 200.8))
        bezier2Path.addLine(to: CGPoint(x: 210.09, y: 260.84))
        bezier2Path.addCurve(to: CGPoint(x: 193.31, y: 266.31), controlPoint1: CGPoint(x: 200.64, y: 264.67), controlPoint2: CGPoint(x: 197.25, y: 265.66))
        bezier2Path.addCurve(to: CGPoint(x: 181.69, y: 266.31), controlPoint1: CGPoint(x: 189.36, y: 266.96), controlPoint2: CGPoint(x: 185.64, y: 266.96))
        bezier2Path.addCurve(to: CGPoint(x: 164.91, y: 260.84), controlPoint1: CGPoint(x: 177.75, y: 265.66), controlPoint2: CGPoint(x: 174.36, y: 264.67))
        bezier2Path.addLine(to: CGPoint(x: 27.19, y: 205.02))
        bezier2Path.addCurve(to: CGPoint(x: 9.92, y: 195.42), controlPoint1: CGPoint(x: 16.78, y: 200.8), controlPoint2: CGPoint(x: 13.31, y: 198.56))
        bezier2Path.addCurve(to: CGPoint(x: 2.41, y: 184.28), controlPoint1: CGPoint(x: 6.52, y: 192.28), controlPoint2: CGPoint(x: 4.04, y: 188.61))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 164.66), controlPoint1: CGPoint(x: 0.78, y: 179.95), controlPoint2: CGPoint(x: 0, y: 175.89))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 41.02))
        bezier2Path.addCurve(to: CGPoint(x: 4.27, y: 16.37), controlPoint1: CGPoint(x: 0, y: 26.76), controlPoint2: CGPoint(x: 1.49, y: 21.59))
        bezier2Path.addCurve(to: CGPoint(x: 16.37, y: 4.27), controlPoint1: CGPoint(x: 7.06, y: 11.16), controlPoint2: CGPoint(x: 11.16, y: 7.06))
        bezier2Path.addCurve(to: CGPoint(x: 41.02, y: 0), controlPoint1: CGPoint(x: 21.59, y: 1.49), controlPoint2: CGPoint(x: 26.76, y: 0))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        fillColor.setFill()
        bezier2Path.fill()
        
        context.restoreGState()
    }




    @objc(TawazonTalkTriangleResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
